@page "/employeelist/edit/{Id:int?}"
@using CoffeShop.Web.Blazor.Shared;
@using CoffeeShop.Model.Enums;
@inject HttpClient httpClient
@inject NavigationManager navigationManager
@inject IJSRuntime jsRuntime
<h3>Employee Edit</h3>

@if (Employee == null) {
    <p>Loading ...</p>
} else {
    <EditForm Model="Employee" OnValidSubmit="OnSave">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="row">
            <div class="col-md-6">
                <label class="form-label">Name</label>
                @*<input class="form-control" @bind="@Employee.Name" />*@
                <InputText class="form-control" @bind-Value="@Employee.Name" />
            </div>
            <div class="col-md-6">
                <label class="form-label">Surname</label>
                <InputText class="form-control" @bind-Value="@Employee.Surname" />
            </div>
            <div class="col-md-6">
                <label class="form-label">Salary Per Month</label>
                <InputNumber class="form-control" @bind-Value="@Employee.SalaryPerMonth" />
            </div>
            <div class="col-md-6">
                <label class="form-label">Employee Type</label>
                <InputSelect class="form-control" @bind-Value="Employee.EmployeeType">
                    @foreach (var employeetype in Enum.GetValues<EmployeeType>()) {
                        <option value="@employeetype">@employeetype</option>
                    }
                </InputSelect>
            </div>
            <div class="row mt-2">
                <div class="col">
                    <BootstrapButton ButtonType="BootstrapButtonType.Success" IsSubmit="true">Save</BootstrapButton>
                    <BootstrapButton ButtonType="BootstrapButtonType.Danger" OnClick="OnCancel">Back</BootstrapButton>
                </div>
            </div>
        </div>
    </EditForm>
}


@code {
    [Parameter] public int? Id { get; set; }
    EmployeeEditDto? Employee { get; set; }

    protected override async Task OnInitializedAsync() {
        if (Id == null) {
            Employee = new();
        } else {
            Employee = await httpClient.GetFromJsonAsync<EmployeeEditDto>($"employee/{Id}");
            if (Employee is null) {
                //TODO: If employee is null
            }
        }
    }

    private void OnCancel() {
        navigationManager.NavigateTo("employeelist");
    }

    private async Task OnSave() {
        HttpResponseMessage? response = null;
        if (Id == null) {
            response = await httpClient.PostAsJsonAsync("employee", Employee);
        } else {
            response = await httpClient.PutAsJsonAsync("employee", Employee);
        }
        if (response.IsSuccessStatusCode) {
            navigationManager.NavigateTo("/employeelist");
        } else {
            var error = await response.Content.ReadAsStringAsync();
            await jsRuntime.InvokeVoidAsync("alert", error);
        }
    }
}

