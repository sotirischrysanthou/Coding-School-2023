@inject HttpClient httpClient
@inject NavigationManager navigationManager
@inject IJSRuntime jsRuntime
@page "/employeelist"
@using CoffeShop.Web.Blazor.Shared;
<h3>Employees</h3>

@if (isLoading) {
    <p>Loading ...</p>
} else {
    <BootstrapButton ButtonType = "BootstrapButtonType.Success" OnClick="CreateItem">Create</BootstrapButton>

    <table class="table table-striped table-hover">
        <thead>
            <tr>
                <th>Name</th>
                <th>Surname</th>
                <th>Salary Per Month</th>
                <th>Employee Type</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var employee in employeeList) {
                <tr>
                    <td>@employee.Name</td>
                    <td>@employee.Surname</td>
                    <td>@employee.SalaryPerMonth</td>
                    <td>@employee.EmployeeType</td>
                    <td>
                        <BootstrapButton ButtonType = "BootstrapButtonType.Warning" OnClick="()=> EditItem(employee)">Edit</BootstrapButton>
                        <BootstrapButton ButtonType = "BootstrapButtonType.Secondary" OnClick="()=> DetailItem(employee)">Details</BootstrapButton>
                        <BootstrapButton ButtonType = "BootstrapButtonType.Danger" OnClick="()=> DeleteItem(employee)">Delete</BootstrapButton>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<EmployeeListDto> employeeList = new();
    bool isLoading { get; set; } = true;

    protected override async Task OnInitializedAsync() {
        await LoadItemsFromServer();
        isLoading = false;
    }

    private async Task LoadItemsFromServer() {
        var tempEmployeeList = await httpClient.GetFromJsonAsync<List<EmployeeListDto>>("employee");
        if (tempEmployeeList is not null) {
            employeeList = tempEmployeeList;
        } else {
            //TODO: if tempEmployeeList is null
        }
    }

    private void CreateItem() {
        navigationManager.NavigateTo("employeeList/edit");
    }

    private void EditItem(EmployeeListDto employee) {
        navigationManager.NavigateTo($"employeeList/edit/{employee.Id}");
    }

    private async Task DeleteItem(EmployeeListDto employee) {
        var confirm = await jsRuntime.InvokeAsync<bool>("confirm", "Delete Item. Are you sure?");
        if (confirm) {
            var response = await httpClient.DeleteAsync($"employee/{employee.Id}");
            response.EnsureSuccessStatusCode();
            await LoadItemsFromServer();
        }
    }

    private void DetailItem(EmployeeListDto employee)
    {
        navigationManager.NavigateTo($"employeeList/details/{employee.Id}");
    }
}
