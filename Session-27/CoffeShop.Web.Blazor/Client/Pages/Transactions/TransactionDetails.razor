@page "/transactionlist/details/{Id:int?}"
@using CoffeShop.Web.Blazor.Shared;
@using CoffeeShop.Model.Enums;
@using CoffeeShop.Model;
@using CoffeeShop.EF.Repositories;
@inject HttpClient httpClient
@inject IJSRuntime jsRuntime
@inject NavigationManager navigationManager
<h3>Transaction Details</h3>

@if (transaction == null)
{
    <p>Loading ...</p>
}
else
{
    <div class="row">
        <div class="col-md-6">
            <label class="form-label">Date</label>
            <input class="form-control" disabled @bind="@transaction.Date" />
        </div>
        <div class="col-md-6">
            <label class="form-label">Total Price</label>
            <input class="form-control" disabled @bind="@transaction.TotalPrice" />
        </div>
    </div>
    <div class="row">
        <div class="col-md-6">
            <label class="form-label">Payment Method</label>
            <select class="form-control" disabled>
                <option selected>@transaction.PaymentMethod</option>
            </select>
        </div>
        <div class="col-md-6">
            <label class="form-label">Customer</label>
            <select class="form-control" disabled>
                <option selected>@transaction.Customer.Code - @transaction.Customer.Description</option>
            </select>
        </div>
    </div>
    <div class="row">
        <div class="col-md-6">
            <label class="form-label">Employee</label>
            <select class="form-control" disabled>
                <option selected>@transaction.Employee.Name @transaction.Employee.Surname</option>
            </select>
        </div>
    </div>

    <br />
    <br />
    <h3>Transaction Lines</h3>
    <div id="transactionLinesContainer" class="container-fluid">
        @foreach (var transactionLine in transaction.TransactionLines)
        {
            <div class="row">
                <div class="col-md-3">
                    <label class="form-label">Product</label>
                    <select class="form-control" disabled>
                        <option selected>@transactionLine.Product </option>
                    </select>
                </div>
                <div class="col-md-2">
                    <label class="form-label">Quantity</label>
                    <input class="form-control" disabled @bind="@transactionLine.Quantity" />
                </div>
                <div class="col-md-2">
                    <label class="form-label">Price</label>
                    <input class="form-control" disabled @bind="@transactionLine.Price" />
                </div>
                <div class="col-md-2">
                    <label class="form-label">Discount</label>
                    <input class="form-control" disabled @bind="@transactionLine.Discount" />
                </div>
                <div class="col-md-2">
                    <label class="form-label">Total Price</label>
                    <input class="form-control" disabled @bind="@transactionLine.TotalPrice" />
                </div>
                <input class="form-control" disabled @bind="@transactionLine.TransactionId" hidden />
            </div>
        }
    </div>
}




@code {
    [Parameter] public int? Id { get; set; }
    private TransactionDetailsDto? transaction { get; set; }
    //private List<CustomerListDto> customerList = new();
    //private List<EmployeeListDto> employeeList = new();
    //private List<ProductListDto> productList = new();

    private bool isLoading { get; set; } = true;

    protected override async Task OnInitializedAsync()
    {
        //var tempCustomerList = await httpClient.GetFromJsonAsync<List<CustomerListDto>>("customer");
        //if (tempCustomerList is null)
        //{
        //    Todo handle if customerList is null

        //    return;
        //}
        //else
        //{
        //    customerList = tempCustomerList;
        //}
        //var tempEmployeeList = await httpClient.GetFromJsonAsync<List<EmployeeListDto>>("employee");
        //if (tempEmployeeList is null)
        //{
        //    Todo handle if employeeList is null

        //    return;
        //}
        //else
        //{
        //    employeeList = tempEmployeeList;
        //}
        //productList = await httpClient.GetFromJsonAsync<List<ProductListDto>>("product");
        if (Id == null)
        {
            transaction = new();
            transaction.Date = DateTime.Now;
        }
        else
        {
            transaction = await httpClient.GetFromJsonAsync<TransactionDetailsDto>($"transactionlist/details/{Id}");
            if (transaction is null)
            {
                //Todo handle if Transaction is null
                return;
            }
            //TODO: selected


        }
        isLoading = false;
    }

    private void OnCancel()
    {
        navigationManager.NavigateTo("transactionlist");
    }
 }

