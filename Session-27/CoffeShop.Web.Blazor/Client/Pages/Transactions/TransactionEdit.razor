@page "/transactionlist/edit/{Id:int?}"
@using CoffeShop.Web.Blazor.Shared;
@using CoffeeShop.Model.Enums;
@using CoffeeShop.Model;
@using CoffeeShop.EF.Repositories;
@inject HttpClient httpClient
@inject NavigationManager navigationManager
<PageTitle>Coffee Shop</PageTitle>
@inject IJSRuntime jsRuntime
<h3>Transaction Edit</h3>

@if (transaction == null) {
    <div class="spinner-border text-secondary" role="status">
    </div>
}
else {
    <br />
   
    @if(Id != null) {
        <div class="col-md-1 flex-md-row d-flex justify-content-start payment-col">
            <button class="btn btn-success btn-cancel-transaction" @onclick="OnSave">Save</button>
            <button class="btn btn-danger btn-cancel-transaction" @onclick="OnCancel">Cancel</button>
        </div>
        <br />
    }
    <div class="row">
        @if (Id == null) {
            <div class="col-md-5 flex-md-column d-flex justify-content-around">

                <div class="row">
                    <div class="col-md-6">
                        <label class="form-label">Customer</label>
                        <select class="form-control" @bind="transaction.CustomerId">
                            @foreach (var customer in customerList) {
                                <option value="@customer.Id">@customer.Code - @customer.Description</option>
                            }
                        </select>
                    </div>
            
                    <div class="col-md-6">
                        <label class="form-label">Employee</label>
                        <select class="form-control" @bind="transaction.EmployeeId">
                            @foreach (var employee in employeeList) {
                                <option value="@employee.Id">@employee.Name - @employee.Surname</option>
                            }
                        </select>
                    </div>
                </div>
            </div>
        
            <div class="col-md-1"></div>
            <div class="col-md-3 flex-md-column d-flex justify-content-center">
                <table id="TransactionLegendTable" class="table table-primary table-transactionLegend">
                    <tbody>
                        <tr>
                            <td>
                                Date:
                            </td>
                            <td>
                                @transaction.Date
                                <input class="form-control" @bind="@transaction.Date" hidden />
                            </td>
                        </tr>
                        <tr>
                            <td>
                                Quantity:
                            </td>
                            <td>
                                @totalQuantity
                            </td>
                        </tr>
                        <tr>
                            <td>
                                Subtotal:
                            </td>
                            <td>
                                @preDiscountTotalPrice &euro;
                            </td>
                        </tr>
                        <tr>
                            <td>
                                Discount:
                            </td>
                            <td>
                                @totalDiscount &euro;
                            </td>
                        </tr>
                        <tr>
                            <td>
                                Total:
                            </td>
                            <td>
                                @transaction.TotalPrice &euro;
                                <input class="form-control" @bind="@transaction.TotalPrice" hidden />
                            </td>
                        </tr>
                    
                    </tbody>
                </table>
            </div>
        

            <div class="col-md-2 flex-md-column d-flex justify-content-between payment-col">
                    <button class="@cardButtonClass" @onclick="OnCash" @onclick:preventDefault> Cash </button>
                    <button class="@cashButtonClass" @onclick="OnCard" @onclick:preventDefault> Card </button>
            </div>
            <div class="col-md-1 flex-md-row d-flex justify-content-start payment-col">
                <button class="btn btn-danger btn-cancel-transaction" @onclick="OnCancel">Cancel</button>
            </div>
            <div class="col-md-1 flex-md-row d-flex justify-content-start payment-col">
                <button class="btn btn-success" @onclick="OnSave">Save</button>
            </div>
            
        }
        else{
            <div class="col-md-2">
                <label class="form-label">Date</label>
                <input class="form-control" @bind="@transaction.Date" disabled />
            </div>
            <div class="col-md-2">
                <label class="form-label">Customer</label>
                <select class="form-control" @bind="transaction.CustomerId">
                    @foreach (var customer in customerList) {
                        <option value="@customer.Id">@customer.Code - @customer.Description</option>
                    }
                </select>
            </div>
            <div class="col-md-2">
                <label class="form-label">Employee</label>
                <select class="form-control" @bind="transaction.EmployeeId">
                    @foreach (var employee in employeeList) {
                        <option value="@employee.Id">@employee.Name - @employee.Surname</option>
                    }
                </select>
            </div>
            <div class="col-md-2">
                <label class="form-label">Total Price</label>
                <input class="form-control" @bind="@transaction.TotalPrice" disabled/>
            </div>
            <div class="col-md-2">
                <label class="form-label">Payment Method</label>
                <select class="form-control" @bind="transaction.PaymentMethod">
                    @foreach (var method in Enum.GetValues<PaymentMethod>()) {
                        <option value="@method">@method</option>
                    }
                </select>
            </div>
        }
    </div>

    
    <br /><br />
    <h3>Transaction Lines</h3>
    <br />
    <button class="btn btn-success" @onclick="AddLine">Add Line</button>

    <table class="table">
        <thead>
            <tr>
                <th>Product</th>
                <th>Quantity</th>
                <th>Price(&euro;)</th>
                <th>Discount(%)</th>
                <th>Total Price(&euro;)</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var transactionLine in transaction.TransactionLines) {
                <tr>
                    <td>
                        <InputSelect class="form-control" @bind-Value="@transactionLine.ProductId" @bind-Value:after="() => OnProductSelect(transactionLine)">
                            @foreach (var product in productList) {
                                <option value="@product.Id">@product.Code - @product.Description</option>
                            }
                        </InputSelect>
                    </td>
                   <td>
                         <InputNumber class="form-control" @bind-Value=@transactionLine.Quantity @bind-Value:after="() => OnLineQuantityChange(transactionLine)"/>
                    </td>
                    <td>
                        <InputNumber class="form-control" @bind-Value=@transactionLine.Price disabled/>
                    </td>
                    <td>
                        <InputNumber class="form-control" @bind-Value=@transactionLine.Discount @bind-Value:after="() => OnDiscountChange(transactionLine)" disabled/>
                    </td>
                    <td>
                    <InputNumber class="form-control" @bind-Value=@transactionLine.TotalPrice disabled/>
                    </td>
                    <td>
                     <BootstrapButton ButtonType = "BootstrapButtonType.Danger" OnClick="()=> RemoveLine(transactionLine)">X</BootstrapButton>
                    </td>
                    <input class="form-control" @bind="@transactionLine.TransactionId" hidden />
                </tr>
            }
        </tbody>
    </table>
}


@code {
    [Parameter] public int? Id { get; set; }

    private TransactionEditDto? transaction { get; set; }
    private List<CustomerListDto> customerList = new();
    private List<EmployeeListDto> employeeList = new();
    private List<ProductListDto> productList = new();
    private bool isLoading { get; set; } = true;
    private decimal totalQuantity { get; set; }
    private decimal totalDiscount { get; set; }
    private decimal preDiscountTotalPrice { get; set; }
    //private bool disabledValue { get; set; } = true;
    //private bool isCashButtonClicked = false;
    private string cardButtonClass = "btn btn-secondary btn-payment";
    private string cashButtonClass = "btn btn-secondary btn-payment";


    protected override async Task OnInitializedAsync() {
        var tempCustomerList = await httpClient.GetFromJsonAsync<List<CustomerListDto>>("customer");
        if (tempCustomerList is null) {
            //Todo handle if customerList is null

            return;
        } else {
            customerList = tempCustomerList;
        }
        var tempEmployeeList = await httpClient.GetFromJsonAsync<List<EmployeeListDto>>("employee");
        if (tempEmployeeList is null) {
            //Todo handle if employeeList is null

            return;
        } else {
            employeeList = tempEmployeeList;
        }
        productList = await httpClient.GetFromJsonAsync<List<ProductListDto>>("product");
        if (Id == null) {
            transaction = new();
            transaction.TransactionLines = new List<TransactionLineEditDto>();
            transaction.Date = DateTime.Now;
        } else {
            transaction = await httpClient.GetFromJsonAsync<TransactionEditDto>($"transaction/{Id}");
            if (transaction is null) {
                //Todo handle if Transaction is null
                return;
            }
            //TODO: selected
        }
        await UpdateTotalQuantity();
        await UpdatePreDiscountTotalPrice();
        await UpdateTransactionTotalPrice();
        isLoading = false;
    }

    private void OnCancel() {
        navigationManager.NavigateTo("transactionlist");
    }

    private async Task OnSave() {
        HttpResponseMessage? response = null;
        foreach(var transactionLine in transaction.TransactionLines) {
            if (transactionLine.ProductId == 0 || transactionLine.Quantity < 1 || transaction.CustomerId == 0 || transaction.EmployeeId == 0 ||transaction.TransactionLines.Count == 0) {
                await jsRuntime.InvokeVoidAsync("alert","Please fill all inputs with valid data!");
                return;
            }
        }

        if (Id == null) {
            response = await httpClient.PostAsJsonAsync("transaction", transaction);
        } else {
            response = await httpClient.PutAsJsonAsync("transaction", transaction);
        }

        response.EnsureSuccessStatusCode();
        navigationManager.NavigateTo("transactionlist");
    }

    private async Task<List<CustomerListDto>> getCustomers() {
        var tempCustomerList = await httpClient.GetFromJsonAsync<List<CustomerListDto>>("customer");
        if(tempCustomerList is null) {
            //Todo handle if customerList is null
            return new List<CustomerListDto>();
        } else {
            return tempCustomerList;
        }
    }

    private async Task<List<EmployeeListDto>> getEmployees() {
        var tempEmployeeList = await httpClient.GetFromJsonAsync<List<EmployeeListDto>>("employee");
        if (tempEmployeeList is null) {
            //Todo handle if employeeList is null
            return new List<EmployeeListDto>();
        }
        else {
            return tempEmployeeList;
        }
    }

    private void AddLine() {
        transaction.TransactionLines.Add(new TransactionLineEditDto());
    }

    async Task RemoveLine(TransactionLineEditDto transactionLine) {
        transaction.TransactionLines.Remove(transactionLine);
        await UpdateTotalQuantity();
        await UpdatePreDiscountTotalPrice();
        await UpdateTransactionTotalPrice();
    }


    async Task OnProductSelect(TransactionLineEditDto transactionLine) {
        var product = productList.Find(product => product.Id == transactionLine.ProductId);
        transactionLine.Price = product.Price;
        await UpdateLineTotalPrice(transactionLine);
        await UpdatePreDiscountTotalPrice();
        await UpdateTransactionTotalPrice();
    }

    async Task OnLineQuantityChange(TransactionLineEditDto transactionLine) {
        await UpdateLineTotalPrice(transactionLine);
        await UpdatePreDiscountTotalPrice();
        await UpdateTransactionTotalPrice();
        await UpdateTotalQuantity();
    }

    async Task OnDiscountChange(TransactionLineEditDto transactionLine) {
        await UpdateLineTotalPrice(transactionLine);
        await UpdateTransactionTotalPrice();
    }

    async Task UpdateLineTotalPrice(TransactionLineEditDto transactionLine) {
        transactionLine.TotalPrice = transactionLine.Price * transactionLine.Quantity * (1 - (transactionLine.Discount / 100));
        transactionLine.TotalPrice = Math.Round(transactionLine.TotalPrice, 2);
    }

    async Task UpdateTotalQuantity() {
        totalQuantity = 0;
        foreach (var transactionLine in transaction.TransactionLines) {
            totalQuantity += transactionLine.Quantity;
        }
    }

    async Task UpdateTransactionTotalPrice() {
        transaction.TotalPrice = 0;
        foreach (var transactionLine in transaction.TransactionLines) {
            transaction.TotalPrice += transactionLine.TotalPrice;
        }
        transaction.TotalPrice = Math.Round(transaction.TotalPrice, 2);
    }

    async Task UpdatePreDiscountTotalPrice() {
        preDiscountTotalPrice = 0;
        foreach (var transactionLine in transaction.TransactionLines) {
            preDiscountTotalPrice += transactionLine.Quantity * transactionLine.Price;
        }
        preDiscountTotalPrice = Math.Round(preDiscountTotalPrice,2);

        if (await DiscountEligible()) {
            await ApplyDiscount();
        }
        else {
            await RemoveDiscount();
        }
        totalDiscount = Math.Round(totalDiscount, 2);
    }

    async Task<bool> DiscountEligible() {
        if (preDiscountTotalPrice > 10) {
            return true;
        }
        else {
            return false;
        }
    }

    async Task ApplyDiscount() {
        totalDiscount = 0;
        foreach (var transactionLine in transaction.TransactionLines) {
            transactionLine.Discount = 15;
            totalDiscount += transactionLine.Price * transactionLine.Quantity * (transactionLine.Discount / 100);
            await UpdateLineTotalPrice(transactionLine);
        }
    }

    async Task RemoveDiscount() {
        totalDiscount = 0;
        foreach (var transactionLine in transaction.TransactionLines) {
            transactionLine.Discount = 0;
            await UpdateLineTotalPrice(transactionLine);
        } 
    }

    async Task OnCash() {
        //isCashButtonClicked = true;
        cardButtonClass = "btn btn-success btn-payment";
        cashButtonClass = "btn btn-secondary btn-payment";

        transaction.PaymentMethod = PaymentMethod.Cash;
        //await OnSave();
    }

    async Task OnCard() {
        if (CardEligible()){
            //isCashButtonClicked = false;
            cardButtonClass = "btn btn-secondary btn-payment";
            cashButtonClass = "btn btn-success btn-payment";
            transaction.PaymentMethod = PaymentMethod.CreditCard;
            //await OnSave();
        }
        else {
            var confirm = await jsRuntime.InvokeAsync<bool>("confirm", "This transaction must be paid by cash. Do you want to proceed?");
            cardButtonClass = "btn btn-secondary btn-payment";
            cashButtonClass = "btn btn-secondary btn-payment";
            if (confirm) {
                await OnCash();
            }
        }
    }

    private bool CardEligible() {
        if (transaction.TotalPrice > 50) {
            return false;
        }
        else {
            return true;
        }
    }
}
    