@inject HttpClient httpClient
@inject NavigationManager navigationManager
@inject IJSRuntime jsRuntime
@page "/transactionlist"
@using CoffeShop.Web.Blazor.Shared;
@using CoffeShop.Web.Blazor.Shared.Transaction;
<h3>Transactions</h3>

@if (isLoading) {
    <p>Loading ...</p>
}
else {
    <button class="btn btn-primary" @onclick="CreateItem">Create</button>

    <table class="table table-striped table-hover">
        <thead>
            <tr>
                <th>Date</th>
                <th>Total Price</th>
                <th>Payment Method</th>
                <th>Customer</th>
                <th>Employee</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var transaction in transactionList) {
                <tr>
                    <td>@transaction.Date</td>
                    <td>@transaction.TotalPrice</td>
                    <td>@transaction.PaymentMethod</td>
                    <td>@transaction.CustomerId</td>
                    <td>@transaction.EmployeeId</td>
                    <td>
                        <button class="btn btn-primary" @onclick="()=> EditItem(transaction)">Edit</button>
                        <button class="btn btn-danger" @onclick="()=> DeleteItem(transaction)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<TransactionListDto> transactionList = new();
    bool isLoading { get; set; } = true;

    protected override async Task OnInitializedAsync() {
        await LoadItemsFromServer();
        isLoading = false;
    }

    private async Task LoadItemsFromServer() {
        var tempTransactionList = await httpClient.GetFromJsonAsync<List<TransactionListDto>>("transaction");
        if(tempTransactionList is null) {
            //TODO
        }
        else {
            transactionList = tempTransactionList;
        }
    }

    private void CreateItem() {
        navigationManager.NavigateTo("transactionList/edit");
    }

    private void EditItem(TransactionListDto transaction) {
        navigationManager.NavigateTo($"customerlist/edit/{transaction.Id}");
    }

    private async Task DeleteItem(TransactionListDto transaction) {
        var confirm = await jsRuntime.InvokeAsync<bool>("confirm", "Delete Item. Are you sure?");
        if (confirm) {
            var response = await httpClient.DeleteAsync($"customer/{transaction.Id}");
            response.EnsureSuccessStatusCode();
            await LoadItemsFromServer();
        }
    }
}