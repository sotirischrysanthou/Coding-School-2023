@using System.Net.Http.Headers;
@using FuelStation.Web.Blazor.Client.Extensions;
@inject HttpClient httpClient
@inject NavigationManager navigationManager
@inject AuthenticationStateProvider authStateProvider
@inject IJSRuntime jsRuntime
@attribute [Authorize(Roles = "Manager,Staff")]
<PageTitle>Fuel Station</PageTitle>
@page "/itemList"

<h3>Items</h3>

@if (isLoading) {
    <div class="spinner-border text-secondary" role="status"></div>
}else {
    <BootstrapButton ButtonType="BootstrapButtonType.Success" OnClick="CreateItem">Create</BootstrapButton>
    <table class="table table-striped table-hover">
        <thead>
            <tr>
                <th>Code</th>
                <th>Description</th>
                <th>Item Type</th>
                <th>Price</th>
                <th>Cost</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in items) {
                <tr>
                    <td>@item.Code</td>
                    <td>@item.Description</td>
                    <td>@item.ItemType.ToString()</td>
                    <td>@item.Price</td>
                    <td>@item.Cost</td>
                    <td>
                        <BootstrapButton ButtonType="BootstrapButtonType.Warning" OnClick="()=> EditItem(item)">Edit</BootstrapButton>
                        <BootstrapButton ButtonType="BootstrapButtonType.Primary" OnClick="()=> DetailItem(item)">Details</BootstrapButton>
                        <BootstrapButton ButtonType="BootstrapButtonType.Danger" OnClick="()=> DeleteItem(item)">Delete</BootstrapButton>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private bool isLoading = true;
    List<ItemListDto> items = new();

    protected override async Task OnInitializedAsync() {
        var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        var token = await customAuthStateProvider.GetToken();
        if (!String.IsNullOrWhiteSpace(token)) {
            httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("bearer", token);
            await LoadItemsFromServer();
            isLoading = false;
        } else {
            navigationManager.NavigateTo("/login", true);
        }
    }

    private async Task LoadItemsFromServer() {
        var itemList = await httpClient.GetFromJsonAsync<List<ItemListDto>>("api/item");
        if(itemList is not null) {
            items = itemList;
        } else {
            await jsRuntime.InvokeVoidAsync("alert", "could not find the item list");
            navigationManager.NavigateTo("");
        }
    }

    private void CreateItem() {
        navigationManager.NavigateTo("itemList/edit");
    }

    private void EditItem(ItemListDto item) {
        navigationManager.NavigateTo($"itemlist/edit/{item.Id}");
    }

    private async Task DeleteItem(ItemListDto item) {
        var confirm = await jsRuntime.InvokeAsync<bool>("confirm", "Delete Item. Are you sure?");
        if (confirm) {
            var response = await httpClient.DeleteAsync($"api/item/{item.Id}");
            if (response.IsSuccessStatusCode) {
                await LoadItemsFromServer();
            } else {
                var error = await response.Content.ReadAsStringAsync();
                await jsRuntime.InvokeVoidAsync("alert", error);
            }
        }
    }

    private void DetailItem(ItemListDto item) {
        navigationManager.NavigateTo($"itemList/details/{item.Id}");
    }
}
