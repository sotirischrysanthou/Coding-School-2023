@inject HttpClient httpClient
@inject NavigationManager navigationManager
@inject IJSRuntime jsRuntime
@page "/monthlyledger"
@using FuelStation.Web.Blazor.Client.Extensions;
@inject AuthenticationStateProvider authStateProvider
@using FuelStation.Web.Blazor.Shared;
@using System.Net.Http.Headers;
@attribute [Authorize(Roles = "Manager")]
<PageTitle>Fuel Station</PageTitle>
<h3>Monthly Ledgers</h3>

@if (isLoading) {
    <div class="spinner-border text-secondary" role="status">
    </div>
} else {

        <table class="table table-striped table-hover">
            <thead>
                <tr>
                    <th>Year</th>
                    <th>Month</th>
                    <th>Income</th>
                    <th>Expenses</th>
                    <th>Total</th>
                </tr>
            </thead>
            <tbody>
            @foreach (var monthlyLedger in MonthlyLedgers) {
                <tr>
                    <td>@monthlyLedger.Year</td>
                    <td>@monthlyLedger.Month</td>
                    <td>@monthlyLedger.Income</td>
                    <td>@monthlyLedger.Expenses</td>
                    <th>@monthlyLedger.Total</th>
                </tr>
            }
            </tbody>
        </table>
}

@code {
    private List<MonthlyLedgerDto> MonthlyLedgers = new();
    bool isLoading { get; set; } = true;

    protected override async Task OnInitializedAsync() {
        var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        var token = await customAuthStateProvider.GetToken();
        if (!String.IsNullOrWhiteSpace(token)) {
            httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("bearer", token);
            await LoadItemsFromServer();
            isLoading = false;
        } else {
            navigationManager.NavigateTo("/login", true);
        }
    }

    private async Task LoadItemsFromServer() {
        var tempMonthlyLedgers = await httpClient.GetFromJsonAsync<List<MonthlyLedgerDto>>("api/monthlyledger");
        if (tempMonthlyLedgers is not null) {
            MonthlyLedgers = tempMonthlyLedgers;
        } else {
            // TODO: if tempCustomerList is null
        }
    }





}