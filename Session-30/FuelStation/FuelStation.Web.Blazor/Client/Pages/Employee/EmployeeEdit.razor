@page "/employeelist/edit/{Id:guid?}"
@using System.Net.Http.Headers;
@using FuelStation.Model.Enums;
@using uelStation.Web.Blazor.Client.Extensions;
@inject HttpClient httpClient
@inject NavigationManager navigationManager
@inject AuthenticationStateProvider authStateProvider
@inject IJSRuntime jsRuntime
@attribute [Authorize(Roles = "Manager")]
<PageTitle>Fuel Station</PageTitle>
<h3>Employee Edit</h3>

@if (isLoading) {
    <div class="spinner-border text-secondary" role="status">
    </div>
}
else {
    <EditForm Model="Employee" OnValidSubmit="OnSave">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="row">
            <div class="col-md-3">
                <label class="form-label">Name</label>
                @*<input class="form-control" @bind="@Employee.Name" />*@
                <InputText class="form-control" @bind-Value="@Employee.Name" />
            </div>
            <div class="col-md-3">
                <label class="form-label">Surname</label>
                <InputText class="form-control" @bind-Value="@Employee.Surname" />
            </div>
            <div class="col-md-6">
                <label class="form-label">Hire date start</label>
                <InputDate class="form-control" @bind-Value="@Employee.HireDateStart" />
            </div>
            <div class="col-md-6">
                <label class="form-label">Hire date end</label>
                <InputDate class="form-control" @bind-Value="@Employee.HireDateEnd" />
            </div>
            <div class="col-md-3">
                <label class="form-label">Salary Per Month</label>
                <InputNumber class="form-control" @bind-Value="@Employee.SalaryPerMonth" />
            </div>
            <div class="col-md-6">
                <label class="form-label">Employee Type</label>
                <InputSelect class="form-control" @bind-Value="Employee.EmployeeType">
                    @foreach (var employeetype in Enum.GetValues<EmployeeType>()) {
                        <option value="@employeetype">@employeetype</option>
                    }
                </InputSelect>
            </div>
            <div class="col-md-6">
                <label class="form-label">Username</label>
                <InputText class="form-control" @bind-Value="@Employee.Account.Username" />
            </div>
            <div class="col-md-6">
                <label class="form-label">Password</label>
                <InputText class="form-control" @bind-Value="@Employee.Account.Password" />
            </div>
            <div class="row mt-2">
                <div class="col">
                    <BootstrapButton ButtonType="BootstrapButtonType.Success" IsSubmit="true">Save</BootstrapButton>
                    <BootstrapButton ButtonType="BootstrapButtonType.Danger" OnClick="OnCancel">Back</BootstrapButton>
                </div>
            </div>
        </div>
    </EditForm>
}


@code {
    private bool isLoading = true;
    [Parameter] public Guid? Id { get; set; }
    EmployeeEditDto? Employee { get; set; }

    protected override async Task OnInitializedAsync() {
        var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        var token = await customAuthStateProvider.GetToken();
        if (!String.IsNullOrWhiteSpace(token)) {
            httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("bearer", token);
            if (Id == null) {
                Employee = new() { HireDateStart = DateTime.Today };
            }
            else {
                Employee = await httpClient.GetFromJsonAsync<EmployeeEditDto>($"api/employee/edit/{Id}");
                if (Employee is null) {
                    //TODO: If employee is null
                }
            }
            isLoading = false;
        }
        else {
            navigationManager.NavigateTo("/login", true);
        }
    }

    private void OnCancel() {
        navigationManager.NavigateTo("employeelist");
    }

    private async Task OnSave() {
        HttpResponseMessage? response = null;
        if (Id == null) {
            if (Employee is not null) {
                Employee.Account.Id = Guid.NewGuid();
                Employee.Account.Role = Employee.EmployeeType;
                Employee.Account.Employee = new EmployeeListDto() {
                        Id = Guid.NewGuid(),
                        Name = Employee.Name,
                        Surname = Employee.Surname,
                        HireDateStart = Employee.HireDateStart,
                        HireDateEnd = null,
                        EmployeeType = Employee.EmployeeType,
                        SalaryPerMonth = Employee.SalaryPerMonth
                    };
                response = await httpClient.PostAsJsonAsync("api/employee", Employee);
                if (response.IsSuccessStatusCode) {
                    var employeeIdStr = await response.Content.ReadAsStringAsync();
                    Guid EmployeeId = Guid.Parse(employeeIdStr);
                    Employee.Account.EmployeeId = EmployeeId;
                }
                response = await httpClient.PostAsJsonAsync("api/account", Employee.Account);
            }
            else {
                response = new HttpResponseMessage(System.Net.HttpStatusCode.BadRequest);
            }
        }
        else {
            if (Employee is not null) {
                Employee.Account.Role = Employee.EmployeeType;
                response = await httpClient.PutAsJsonAsync("api/account", Employee.Account);
            }
            response = await httpClient.PutAsJsonAsync("api/employee", Employee);
        }
        if (response.IsSuccessStatusCode) {
            navigationManager.NavigateTo("/employeelist");
        }
        else {
            var error = await response.Content.ReadAsStringAsync();
            await jsRuntime.InvokeVoidAsync("alert", error);
        }
    }
}

