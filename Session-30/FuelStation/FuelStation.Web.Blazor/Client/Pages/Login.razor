@page "/login"
@using System.Net;
@using FuelStation.Model;
@using uelStation.Web.Blazor.Client.Extensions;
@inject HttpClient httpClient
@inject IJSRuntime jsRuntime
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navigationManager

<div class="row">
    <div class="col-lg-4 offset-lg-4 pt-4 pb-4 border">
        <div class="mb-3 text-center">
            <h3>LOGIN</h3>
        </div>
        <div class="mb-3">
            <label>Username</label>
            <input @bind="loginRequest.Username" class="form-control" placeholder="User Name" />
        </div>
        <div class="mb-3">
            <label>Password</label>
            <input type="password" @bind="loginRequest.Password" class="form-control" placeholder="Password" />
        </div>
        <div class="mb-3 gap-2">
            <button @onclick="Authenticate" class="btn btn-primary">Login</button>
        </div>
    </div>
</div>

@code {
    private LoginRequest loginRequest = new LoginRequest();

    private async Task Authenticate() {
        var loginResponse = await httpClient.PostAsJsonAsync<LoginRequest>("/api/Login", loginRequest);
        if (loginResponse.IsSuccessStatusCode) {
            var userSession = await loginResponse.Content.ReadFromJsonAsync<UserSession>();
            var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
            await customAuthStateProvider.UpdateAthenticationState(userSession);
            navigationManager.NavigateTo("/", true);
        }else if (loginResponse.StatusCode == HttpStatusCode.Unauthorized) {
            await jsRuntime.InvokeVoidAsync("alert","Invalid User Name or Password");
            return;
        }
    }
}
