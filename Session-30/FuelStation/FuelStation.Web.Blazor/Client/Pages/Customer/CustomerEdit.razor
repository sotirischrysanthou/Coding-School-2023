@page "/customerlist/edit/{Id:guid?}"
@using FuelStation.Web.Blazor.Shared;
@inject HttpClient httpClient
@inject NavigationManager navigationManager
@inject IJSRuntime jsRuntime
<PageTitle>Coffee Shop</PageTitle>


@if (Id is null) {
    <h3>Create Customer</h3>
} else {

    <h3>Customer Edit</h3>
}

@if (Customer == null) {
    <div class="spinner-border text-secondary" role="status">
    </div>
} else {
    <EditForm Model="Customer" OnValidSubmit="OnSave">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="row">
            <div class="col-md-4">
                <label class="form-label">Code</label>
                <InputText class="form-control" @bind-Value="@Customer.Name" />
            </div>
            <div class="col-md-4">
                <label class="form-label">Description</label>
                <InputText class="form-control" @bind-Value="@Customer.Surname" />
            </div>
            <div class="col-md-4">
                <label class="form-label">Description</label>
                <InputText class="form-control" @bind-Value="@Customer.CardNumber" />
            </div>

        </div>
        <div class="row mt-2">
            <div class="col">
                <BootstrapButton ButtonType="BootstrapButtonType.Success" IsSubmit="true">Save</BootstrapButton>
                <BootstrapButton ButtonType="BootstrapButtonType.Secondary" OnClick="OnCancel">Back</BootstrapButton>
            </div>
        </div>
    </EditForm>
}


@code {
    [Parameter] public Guid? Id { get; set; }
    CustomerEditDto? Customer { get; set; }

    protected override async Task OnInitializedAsync() {
        if (Id == null) {
            Customer = new();
        } else {
            Customer = await httpClient.GetFromJsonAsync<CustomerEditDto>($"api/customer/{Id}");
            if (Customer is null) {
                //TODO: Handle if customer is null
            }
        }
    }

    private void OnCancel() {
        navigationManager.NavigateTo("customerList");
    }

    private async Task OnSave() {
        HttpResponseMessage? response = null;
        if (Id == null) {
            response = await httpClient.PostAsJsonAsync("customer", Customer);
        } else {
            response = await httpClient.PutAsJsonAsync("customer", Customer);
        }
        if (response.IsSuccessStatusCode) {
            navigationManager.NavigateTo("/customerlist");
        } else {
            var error = await response.Content.ReadAsStringAsync();
            await jsRuntime.InvokeVoidAsync("alert", error);
        }
    }
}