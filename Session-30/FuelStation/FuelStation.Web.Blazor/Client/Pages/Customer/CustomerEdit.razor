@page "/customerlist/edit/{Id:guid?}"
@using FuelStation.Web.Blazor.Shared;
@using System.Net.Http.Headers;
@using FuelStation.Web.Blazor.Client.Extensions;
@inject HttpClient httpClient
@inject NavigationManager navigationManager
@inject AuthenticationStateProvider authStateProvider
@inject IJSRuntime jsRuntime
@attribute [Authorize(Roles = "Manager,Cashier")]
<PageTitle>Fuel Station</PageTitle>


@if (Id is null) {
    <h3>Create Customer</h3>
}
else {
    <h3>Customer Edit</h3>
}

@if (isLoading) {
    <div class="spinner-border text-secondary" role="status">
    </div>
}
else if(Customer is not null) {
    <EditForm Model="Customer" OnValidSubmit="OnSave">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="row">
            <div class="col-md-4">
                <label class="form-label">Name</label>
                <InputText class="form-control" @bind-Value="@Customer.Name" />
            </div>
            <div class="col-md-4">
                <label class="form-label">Surname</label>
                <InputText class="form-control" @bind-Value="@Customer.Surname" />
            </div>
            @if (Id is not null) {
                <div class="col-md-4">
                    <label class="form-label">Card Number</label>
                    <InputText class="form-control" @bind-Value="@Customer.CardNumber" disabled />
                </div>
            }
        </div>
        <div class="row mt-2">
            <div class="col">
                <BootstrapButton ButtonType="BootstrapButtonType.Success" IsSubmit="true">Save</BootstrapButton>
                <BootstrapButton ButtonType="BootstrapButtonType.Secondary" OnClick="OnCancel">Back</BootstrapButton>
            </div>
        </div>
    </EditForm>
}


@code {
    private bool isLoading = true;
    [Parameter] public Guid? Id { get; set; }
    CustomerEditDto? Customer { get; set; }

    protected override async Task OnInitializedAsync() {
        var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        var token = await customAuthStateProvider.GetToken();
        if (!String.IsNullOrWhiteSpace(token)) {
            httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("bearer", token);
            if (Id == null) {
                Customer = new();
                Customer.CardNumber = "A0";
            }
            else {
                Customer = await httpClient.GetFromJsonAsync<CustomerEditDto>($"api/customer/edit/{Id}");
                if (Customer is null) {
                    await jsRuntime.InvokeVoidAsync("alert", "Can not find Customer");
                    navigationManager.NavigateTo("/");
                    //TODO: Handle if customer is null
                }
            }
            isLoading = false;
        }
        else {
            navigationManager.NavigateTo("/login", true);
        }
    }

    private void OnCancel() {
        navigationManager.NavigateTo("customerList");
    }

    private async Task OnSave() {
        HttpResponseMessage? response = null;
        if (Id == null) {
            response = await httpClient.PostAsJsonAsync("api/customer", Customer);
            if (response.IsSuccessStatusCode)
            {
                if (Customer is not null)
                {
                    var cardNumber = await response.Content.ReadAsStringAsync();
                    await jsRuntime.InvokeVoidAsync("alert", $"Customer {Customer.Name} {Customer.Surname} has registered with card number {cardNumber}");
                }
            }
        }
        else {
            response = await httpClient.PutAsJsonAsync("api/customer", Customer);
        }
        if (response.IsSuccessStatusCode) {
            navigationManager.NavigateTo("/customerlist");
        }
        else {
            var error = await response.Content.ReadAsStringAsync();
            await jsRuntime.InvokeVoidAsync("alert", error);
        }
    }
}